{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Add.js","components/Delete.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","thing","console","log","length","map","a","i","key","Searchbox","onsearchchange","type","placeholder","onChange","Add","rerender","useState","setName","setEmail","htmlFor","event","target","value","onClick","fetch","method","headers","body","JSON","stringify","then","response","json","user","alert","Delete","setId","App","setRobots","searchfield","setSearch","count","setCount","users","c","useEffect","filteredrobots","filter","robot","toLowerCase","includes","err","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.67e4cd08.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\nimport '../containers/App.css';\r\n\r\nfunction Card(props){\r\n    return(\r\n        <div className = 'tc bg-light-yellow dib br3 pa3 ma2 grow'>\r\n           <img alt = 'pic' src = {`https://robohash.org/${props.id}`} />\r\n           <h2>{props.name}</h2>\r\n           <h4>{props.email}</h4>\r\n           <h6>{props.id}</h6>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({robots, thing})\r\n{   \r\n    console.log(\"robots returned\",robots.length);\r\n    return(\r\n        <div>\r\n        {\r\n            (robots.length !== 0)?\r\n            (robots.map((a,i)=>{\r\n                return(\r\n                    <Card key = {i}\r\n                        id = {robots[i].id} \r\n                        name = {robots[i].name} \r\n                        email = {robots[i].email} \r\n                     />\r\n                ); \r\n            }))\r\n            :\r\n            (<h3>No robots with {thing}!</h3>)\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction Searchbox({onsearchchange}){\r\n    return(\r\n        <div className = 'tc pa2'>\r\n        <input \r\n            className = 'pa2 ba b--gold bg-light-yellow' \r\n            type = 'search' \r\n            placeholder = 'search robots:' \r\n            onChange = {onsearchchange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React, {useState} from 'react';\r\n\r\nfunction Add({rerender}) {\r\n\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n\r\n    function onEmailChange(event){\r\n        setEmail(event.target.value);\r\n    }\r\n    \r\n    function onNameChange(event){\r\n        setName(event.target.value);\r\n    }\r\n  \r\n    function addRobot(){\r\n        if(name.length<=50){\r\n          console.log(name,email);\r\n        fetch('https://damp-depths-06693.herokuapp.com/add', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                email: email\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(user => {\r\n                if (user === \"added robot\") {\r\n                    console.log(\"user added\");\r\n                    rerender();\r\n                }\r\n                else{\r\n                  console.log(\"robot not added\");\r\n                  alert(user);\r\n                }\r\n            })\r\n        }\r\n        else{\r\n          alert(\"name too big!\");\r\n        }\r\n    }\r\n\r\n    return (\r\n      <article className=\"br3 ba b--yellow mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 yellow\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 gold mh0\">Add Robot</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy gold f6\" htmlFor=\"name\">Name</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba b--yellow bg-transparent hover-bg-transparent hover-yellow w-100\"\r\n                  type=\"text\"\r\n                  onChange={onNameChange}\r\n                />\r\n              </div>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy gold f6\" htmlFor=\"email-address\">Email</label>\r\n                <input\r\n                  className=\"pa2 input-reset b--yellow ba bg-transparent hover-bg-transparent hover-yellow w-100\"\r\n                  type=\"email\"\r\n                  onChange={onEmailChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div>\r\n              <input\r\n                onClick={addRobot}\r\n                className=\"b ph3 pv2 input-reset ba b--yellow gold bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Add\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n}\r\n\r\nexport default Add;\r\n","import React, {useState} from 'react';\r\n\r\nfunction Delete({rerender}) {\r\n\r\n    const [id, setId] = useState('');\r\n\r\n    function onIdChange(event){\r\n        setId(event.target.value);\r\n    }\r\n\r\n    function deleteRobot(){\r\n        console.log(id);\r\n        if(id.length>0){\r\n          fetch('https://damp-depths-06693.herokuapp.com/delete', {\r\n            method: 'delete',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                id:id\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(user => {\r\n                if (user) {\r\n                    console.log(\"user deleted\");\r\n                    rerender();\r\n                }\r\n                else{\r\n                  alert(\"could not delete robot\");\r\n                }\r\n            })\r\n        }\r\n        else{\r\n          alert(\"enter the ID of the robot you wish to delete\");\r\n        }\r\n    }\r\n  \r\n    return (\r\n      <article className=\"br3 ba b--yellow mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 yellow\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 gold mh0\">Delete Robot</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy gold f6\" htmlFor=\"name\">no. of the robot you want to delete</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba b--yellow bg-transparent hover-bg-transparent hover-yellow w-100\"\r\n                  type=\"text\"\r\n                  onChange={onIdChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div>\r\n              <input\r\n                onClick={deleteRobot}\r\n                className=\"b ph3 pv2 input-reset ba b--yellow gold bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Delete\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n}\r\n\r\nexport default Delete;\r\n","import React, {useState, useEffect } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Add from '../components/Add';\r\nimport Delete from '../components/Delete';\r\nimport './App.css';\r\n\r\nfunction App() \r\n{\r\n    const [robots, setRobots] = useState([]);\r\n    const [searchfield, setSearch] = useState('');\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        fetch('https://damp-depths-06693.herokuapp.com/robots', {\r\n            method: 'get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n        .then(response => response.json())\r\n        .then(users => setRobots(users));\r\n        fetch('https://damp-depths-06693.herokuapp.com/count', {\r\n            method: 'get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n        .then(response => response.json())\r\n        .then(c => setCount(c));\r\n        console.log(\"useEffect\");\r\n    },[]);\r\n\r\n    function rerender(){\r\n        console.log(\"rerendered\");\r\n        fetch('https://damp-depths-06693.herokuapp.com/robots', {\r\n            method: 'get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n        .then(response => response.json())\r\n        .then(users => setRobots(users));\r\n        fetch('https://damp-depths-06693.herokuapp.com/count', {\r\n            method: 'get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n        .then(response => response.json())\r\n        .then(c => setCount(c));\r\n    }\r\n\r\n    const onsearchchange = (event) =>{\r\n        console.log(event.target.value);\r\n        setSearch(event.target.value);   \r\n    }\r\n    try{\r\n        var filteredrobots = robots.filter(robot=>{return robot.name.toLowerCase().includes(searchfield.toLowerCase())});\r\n    }\r\n    catch(err){\r\n        filteredrobots = [{\r\n            \"id\":0,\r\n            \"name\":\"nobody\",\r\n            \"email\":\"don't worry, I'm still your friend\"\r\n        }]\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <h1 id=\"main\">Robo-Friends</h1>\r\n            <h3>you have {count} robo-friends!</h3>\r\n            <Searchbox onsearchchange = {onsearchchange} />   \r\n            <a href=\"#edit\"><h4>Click here to add/delete robots</h4></a>     \r\n            <CardList robots = {filteredrobots} thing={searchfield} />     \r\n            <div className=\"choices\" id=\"edit\" >\r\n            <Add rerender={rerender}/>\r\n            <Delete rerender={rerender}/>\r\n            </div>       \r\n            <a href=\"#main\"><h4>Go back to the top</h4></a>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}